MILKDROP_PRESET_VERSION=201
PSVERSION=3
PSVERSION_WARP=3
PSVERSION_COMP=3
[preset00]
fRating=5.000000
fGammaAdj=1.980
fDecay=0.500
fVideoEchoZoom=1.000
fVideoEchoAlpha=0.500
nVideoEchoOrientation=3
nWaveMode=4
bAdditiveWaves=0
bWaveDots=0
bWaveThick=0
bModWaveAlphaByVolume=1
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=1.170
fWaveScale=0.566
fWaveSmoothing=0.090
fWaveParam=-0.800
fModWaveAlphaStart=0.400
fModWaveAlphaEnd=1.800
fWarpAnimSpeed=1.459
fWarpScale=2.007
fZoomExponent=1.00000
fShader=0.000
zoom=0.99990
rot=0.00000
cx=0.500
cy=0.500
dx=0.00000
dy=0.00000
warp=0.01000
sx=0.99990
sy=1.00000
wave_r=1.000
wave_g=0.000
wave_b=0.000
wave_x=0.500
wave_y=0.500
ob_size=0.000
ob_r=0.000
ob_g=0.100
ob_b=1.000
ob_a=1.000
ib_size=0.000
ib_r=0.000
ib_g=0.000
ib_b=0.000
ib_a=0.000
nMotionVectorsX=64.000
nMotionVectorsY=48.000
mv_dx=0.000
mv_dy=0.000
mv_l=1.000
mv_r=1.000
mv_g=1.000
mv_b=0.900
mv_a=0.000
b1n=0.000
b2n=0.000
b3n=0.000
b1x=1.000
b2x=1.000
b3x=1.000
b1ed=0.000
wavecode_0_enabled=0
wavecode_0_samples=512
wavecode_0_sep=256
wavecode_0_bSpectrum=0
wavecode_0_bUseDots=1
wavecode_0_bDrawThick=0
wavecode_0_bAdditive=1
wavecode_0_scaling=100.00000
wavecode_0_smoothing=0.90000
wavecode_0_r=0.000
wavecode_0_g=0.700
wavecode_0_b=1.000
wavecode_0_a=1.000
wave_0_per_frame1=advance=advance+ 0.012;
wave_0_per_frame2=advance=if( above(advance,2) , 0, advance);
wave_0_per_frame3=
wave_0_per_frame4=t1=advance
wave_0_per_frame5=
wavecode_1_enabled=0
wavecode_1_samples=42
wavecode_1_sep=0
wavecode_1_bSpectrum=0
wavecode_1_bUseDots=1
wavecode_1_bDrawThick=0
wavecode_1_bAdditive=1
wavecode_1_scaling=81.95444
wavecode_1_smoothing=1.00000
wavecode_1_r=1.000
wavecode_1_g=1.000
wavecode_1_b=1.000
wavecode_1_a=1.000
wave_1_per_frame1=advance=advance+ 0.012;
wave_1_per_frame2=advance=if( above(advance,2) , 0, advance);
wave_1_per_frame3=
wave_1_per_frame4=t1=advance
wavecode_2_enabled=0
wavecode_2_samples=42
wavecode_2_sep=0
wavecode_2_bSpectrum=0
wavecode_2_bUseDots=1
wavecode_2_bDrawThick=1
wavecode_2_bAdditive=1
wavecode_2_scaling=1.00000
wavecode_2_smoothing=0.50000
wavecode_2_r=1.000
wavecode_2_g=1.000
wavecode_2_b=1.000
wavecode_2_a=0.360
wavecode_3_enabled=0
wavecode_3_samples=192
wavecode_3_sep=0
wavecode_3_bSpectrum=0
wavecode_3_bUseDots=1
wavecode_3_bDrawThick=0
wavecode_3_bAdditive=1
wavecode_3_scaling=1.00000
wavecode_3_smoothing=0.50000
wavecode_3_r=1.000
wavecode_3_g=1.000
wavecode_3_b=1.000
wavecode_3_a=0.320
shapecode_0_enabled=0
shapecode_0_sides=16
shapecode_0_additive=0
shapecode_0_thickOutline=1
shapecode_0_textured=1
shapecode_0_num_inst=1
shapecode_0_x=0.500
shapecode_0_y=0.500
shapecode_0_rad=0.97235
shapecode_0_ang=0.18840
shapecode_0_tex_ang=0.62832
shapecode_0_tex_zoom=0.77829
shapecode_0_r=1.000
shapecode_0_g=1.000
shapecode_0_b=1.000
shapecode_0_a=0.900
shapecode_0_r2=1.000
shapecode_0_g2=1.000
shapecode_0_b2=1.000
shapecode_0_a2=0.500
shapecode_0_border_r=0.590
shapecode_0_border_g=0.810
shapecode_0_border_b=0.690
shapecode_0_border_a=0.000
shapecode_1_enabled=1
shapecode_1_sides=4
shapecode_1_additive=0
shapecode_1_thickOutline=0
shapecode_1_textured=1
shapecode_1_num_inst=1
shapecode_1_x=0.500
shapecode_1_y=0.500
shapecode_1_rad=0.41490
shapecode_1_ang=0.00000
shapecode_1_tex_ang=0.25133
shapecode_1_tex_zoom=0.38021
shapecode_1_r=1.000
shapecode_1_g=0.000
shapecode_1_b=0.000
shapecode_1_a=1.000
shapecode_1_r2=1.000
shapecode_1_g2=0.000
shapecode_1_b2=0.000
shapecode_1_a2=1.000
shapecode_1_border_r=1.000
shapecode_1_border_g=0.000
shapecode_1_border_b=0.000
shapecode_1_border_a=1.000
shape_1_per_frame1=
shape_1_per_frame2=advx=advx+(bass*bass)/fps*4;
shape_1_per_frame3=advy=advy+(treb*treb)/fps*4;
shape_1_per_frame4=
shape_1_per_frame5=r=rand(10)*0.1*0.5+0.5;
shape_1_per_frame6=g=r;
shape_1_per_frame7=b=r;
shape_1_per_frame8=
shape_1_per_frame9=
shape_1_per_frame10=x= .5 + .3*sin(advx);
shape_1_per_frame11=y= .5 + .3*sin(advy);
shape_1_per_frame12=
shape_1_per_frame13=
shape_1_per_frame14=rad=rand(100)*0.01*0.2+0.021;
shape_1_per_frame15=vol = bass_att + mid_att + treb_att;
shape_1_per_frame16=rad = min(.2,vol*.03);
shape_1_per_frame17=
shape_1_per_frame18=
shape_1_per_frame19=a = min(1,vol/4); a2 = a;
shape_1_per_frame20=border_a = a;
shape_1_per_frame21=
shape_1_per_frame22=ang = vol*8;
shapecode_2_enabled=0
shapecode_2_sides=24
shapecode_2_additive=0
shapecode_2_thickOutline=0
shapecode_2_textured=1
shapecode_2_num_inst=1
shapecode_2_x=0.200
shapecode_2_y=0.800
shapecode_2_rad=0.59958
shapecode_2_ang=0.00000
shapecode_2_tex_ang=1.25664
shapecode_2_tex_zoom=0.49831
shapecode_2_r=1.000
shapecode_2_g=1.000
shapecode_2_b=1.000
shapecode_2_a=1.000
shapecode_2_r2=1.000
shapecode_2_g2=1.000
shapecode_2_b2=1.000
shapecode_2_a2=1.000
shapecode_2_border_r=1.000
shapecode_2_border_g=1.000
shapecode_2_border_b=1.000
shapecode_2_border_a=0.000
shapecode_3_enabled=0
shapecode_3_sides=4
shapecode_3_additive=0
shapecode_3_thickOutline=0
shapecode_3_textured=1
shapecode_3_num_inst=1
shapecode_3_x=0.860
shapecode_3_y=0.200
shapecode_3_rad=0.80814
shapecode_3_ang=0.00000
shapecode_3_tex_ang=0.00000
shapecode_3_tex_zoom=0.45112
shapecode_3_r=1.000
shapecode_3_g=1.000
shapecode_3_b=1.000
shapecode_3_a=1.000
shapecode_3_r2=1.000
shapecode_3_g2=1.000
shapecode_3_b2=0.900
shapecode_3_a2=1.000
shapecode_3_border_r=1.000
shapecode_3_border_g=1.000
shapecode_3_border_b=1.000
shapecode_3_border_a=0.000
per_frame_init_1=
per_frame_init_2=//******** INITIALIZATION *********
per_frame_init_3=//---------- some global vars, do not change -------------
per_frame_init_4=avg = 0.01;
per_frame_init_5=q7 = .4; //MyZoom
per_frame_init_6=q8 =  rand(2.0)-1.0; //fractal modifier
per_frame_init_7=q16 = 1; //Tele ; rather fish eye
per_frame_init_8=q18 = rand(0.8)+.1; //brightness balance back/front
per_frame_init_9=q31 =128;
per_frame_init_10=start = 1; travel = 0; RotZ = 0; look = 0; slow = 0; t0 = time+3; lampx = .5; lampy = .5;
per_frame_init_11=cran0 = rand(1);
per_frame_init_12=n = 0; loop (10000, gmegabuf(n)=0; n=n+1; ); 
per_frame_init_13=n = 0; loop (10000,  megabuf(n)=0; n=n+1; ); 
per_frame_init_14=trelx = 0;  trely = 0; trelz = 0;
per_frame_init_15=reg20 = 1; reg21 = 0; reg22 = 0; reg23 = 0; reg24 = 1; reg25 = 0; reg26 = 0; reg27 = 0; reg28 = 1;
per_frame_init_16=
per_frame_init_17=//Find random starting point
per_frame_init_18=  ran1 = rand(800)/100;  ran2 = rand(800)/100;  ran3 = rand(800)/100;
per_frame_init_19=  PosX = rand(5)-2;   PosY = rand(5)-2;   PosZ = rand(5)-2; 
per_frame_init_20=
per_frame_init_21=  c1 = cos(ran1); c2 = cos(ran2); c3 = cos(ran3); 
per_frame_init_22=  s1 = sin(ran1); s2 = sin(ran2); s3 = sin(ran3);
per_frame_init_23=
per_frame_init_24=  reg20 = c2*c1; reg21 = c2*s1; reg22 = -s2;
per_frame_init_25=  reg23 = s3*s2*c1 - c3*s1; reg24 = s3*s2*s1 + c3*c1; reg25 = s3*c2;
per_frame_init_26=  reg26 = c3*s2*c1 + s3*s1; reg27 = c3*s2*s1 - s3*c1; reg28 = c3*c2;
per_frame_init_27=
per_frame_init_28=rota = 0;
per_frame_init_29=count = 0;
per_frame_1=fps_ = .0 * fps_ + 1*if(fps<=25,fps,25+.5*(fps-25)); 
per_frame_2=fps_= fps;
per_frame_3=
per_frame_4=dec_m = pow (0.7, 30/fps);
per_frame_5=dec_s = pow (0.9, 30/fps);
per_frame_6=beat = max (max (bass, mid), treb); 
per_frame_7=avg = avg*dec_s + beat*(1-dec_s);
per_frame_8=is_beat = above(beat, 2*avg+2*peak) * above (time, t0+-.3);
per_frame_9=t0 = is_beat*time + (1-is_beat)*t0;
per_frame_10=peak = is_beat * beat + (1-is_beat)*peak*dec_m;
per_frame_11=index = (index + is_beat) %4;
per_frame_12=index2 = (index2 + is_beat*bnot(index)) %8;
per_frame_13=wave_a = (index2<5);
per_frame_14=rota = rota*dec_m + (1-dec_m)*index2*3.14;
per_frame_15=q9 = 0;
per_frame_16=
per_frame_17=vol = bass+mid+treb;
per_frame_18=//vol = is_beat;
per_frame_19=vol *= vol*vol;
per_frame_20=dec_m = .3;
per_frame_21=vol_ = dec_m * vol_ + (1-dec_m)*vol;
per_frame_22=
per_frame_23=ds = (above(vol,vol_*1.35))/8*pow(vol,.25);
per_frame_24=//ds = is_beat/8*beat;
per_frame_25=
per_frame_26=//Position 
per_frame_27=DirX= reg26; DirY= reg27; DirZ = reg28;
per_frame_28=PosX = PosX + ds*DirX ; PosY = PosY + ds*DirY; PosZ = PosZ + ds*DirZ; 
per_frame_29=q4 = PosX; q5 = PosY; q6 = PosZ;
per_frame_30=
per_frame_31=angchg = (.3-dist_)*(dist_ < .3);
per_frame_32=travel = if (angchg > 0,0,travel+ds);
per_frame_33=v1 = v1 * dec_s + (1-dec_s)* RotZ * ds/4;
per_frame_34=v2 = v2 *dec_s + (1-dec_s)*angchg *xslope/fps_/3;
per_frame_35=v3 = v3 *dec_s + (1-dec_s)*(angchg *yslope/fps_/3);
per_frame_36=v1 = 0; v2 = 0; v3 = 0; v1 = 0;
per_frame_37=//push old RotMat
per_frame_38=reg30 =reg20; reg31 =reg21; reg32 =reg22; 
per_frame_39=reg33 =reg23; reg34 =reg24; reg35 =reg25; 
per_frame_40=reg36 =reg26; reg37 =reg27; reg38 =reg28; 
per_frame_41=
per_frame_42=n = 4; avg = 0;
per_frame_43=loop (1,
per_frame_44=  n = n+1;
per_frame_45=  //new Rot. Mat for infinitesimal angles
per_frame_46=  ran1 = rand(100)/100;
per_frame_47=  ran2 = rand(100)/200-.25;
per_frame_48=  tx = cos(n*1.57+ran2) * (n <= 4)*ran1; ty = sin(n*1.57+ran2) * (n <= 4)*ran1;
per_frame_49=  c1 = cos(v1); c2 = cos(v2+ty); c3 = cos(v3+tx); 
per_frame_50=  s1 = sin(v1); s2 = sin(v2+ty); s3 = sin(v3+tx);
per_frame_51=  reg10 = c2*c1; reg11 = c2*s1; reg12 = -s2;
per_frame_52=  reg13 = s3*s2*c1 - c3*s1; reg14 = s3*s2*s1 + c3*c1; reg15 = s3*c2;
per_frame_53=  reg16 = c3*s2*c1 + s3*s1; reg17 = c3*s2*s1 - s3*c1; reg18 = c3*c2;
per_frame_54=
per_frame_55=  //pop old RotMat
per_frame_56=  reg20 =reg30; reg21 =reg31; reg22 =reg32; 
per_frame_57=  reg23 =reg33; reg24 =reg34; reg25 =reg35; 
per_frame_58=  reg26 =reg36; reg27 =reg37; reg28 =reg38; 
per_frame_59=
per_frame_60=  //Multiply new RotMat by old one
per_frame_61=  q20 = reg10*reg20 + reg11*reg23 + reg12*reg26;
per_frame_62=  q21 = reg10*reg21 + reg11*reg24 + reg12*reg27;
per_frame_63=  q22 = reg10*reg22 + reg11*reg25 + reg12*reg28;
per_frame_64=  q23 = reg13*reg20 + reg14*reg23 + reg15*reg26;
per_frame_65=  q24 = reg13*reg21 + reg14*reg24 + reg15*reg27;
per_frame_66=  q25 = reg13*reg22 + reg14*reg25 + reg15*reg28;
per_frame_67=  q26 = reg16*reg20 + reg17*reg23 + reg18*reg26;
per_frame_68=  q27 = reg16*reg21 + reg17*reg24 + reg18*reg27;
per_frame_69=  q28 = reg16*reg22 + reg17*reg25 + reg18*reg28;
per_frame_70=
per_frame_71=  reg20 =q20; reg21 =q21; reg22 =q22;
per_frame_72=  reg23 =q23; reg24 =q24; reg25 =q25;
per_frame_73=  reg26 =q26; reg27 =q27; reg28 =q28;
per_frame_74=
per_frame_75=  //***********BOT*************
per_frame_76=  //Coord. Trans. must exactly match def in warp S. !!!!
per_frame_77=  dist = 0.002;
per_frame_78=  while (exec2(
per_frame_79=    uvx = reg26*dist/q7; uvy = reg27*dist/q7; uvz = reg28*dist/q7;
per_frame_80=    uvx += PosX; uvy += PosY; uvz += PosZ;
per_frame_81=    uvx = 8.0*((uvx/8+30.5 - int(uvx/8+30.5))-.5);
per_frame_82=    uvy = 8.0*((uvy/8+30.5 - int(uvy/8+30.5))-.5);
per_frame_83=    uvz = 8.0*((uvz/8+30.5 - int(uvz/8+30.5))-.5);
per_frame_84=    uvx0 = uvx+q8; uvy0 = uvy+q8; uvz0 = uvz+q8;
per_frame_85=    loop (7+1,
per_frame_86=      uvx = if (uvx > 1, 2-uvx, if(uvx < -1, -2-uvx, uvx));
per_frame_87=      uvy = if (uvy > 1, 2-uvy, if(uvy < -1, -2-uvy, uvy));
per_frame_88=      uvz = if (uvz > 1, 2-uvz, if(uvz < -1, -2-uvz, uvz));
per_frame_89=      slen = uvx*uvx + uvy*uvy + uvz*uvz;
per_frame_90=      uvx = if (slen < 0.25, uvx*4, if (slen < 1, uvx/slen, uvx)) *2.6 + uvx0; 
per_frame_91=      uvy = if (slen < 0.25, uvy*4, if (slen < 1, uvy/slen, uvy)) *2.6 + uvy0; 
per_frame_92=      uvz = if (slen < 0.25, uvz*4, if (slen < 1, uvz/slen, uvz)) *2.6 + uvz0; 
per_frame_93=    );
per_frame_94=    len = sqrt(uvx*uvx + uvy*uvy + uvz*uvz);
per_frame_95=    dist *= 1.5;
per_frame_96=  ,(dist < 0.6)*(len > 30)));
per_frame_97=  megabuf(n) = megabuf(n)*dec_s + (1-dec_s)*dist; //stores the 4 trial points
per_frame_98=  avg = avg+abs(megabuf(n)/5);
per_frame_99=); //end loop 5
per_frame_100=
per_frame_101=n = 0; avg = 0; loop (5, n=n+1; avg = avg+abs(megabuf(n)/5));
per_frame_102=
per_frame_103=dist_ = dist_*dec_s + (1-dec_s)*dist;
per_frame_104=
per_frame_105=q10 = ds*q7; //compensation of lin. movement in GetDist and zoom uv
per_frame_106=q14 = 1*abs(ds) + 2*(abs(v1) + abs(v2) + abs(v3)) + 1.0/255 + start*.05; 
per_frame_107=start = start * .9;
per_frame_108=vz1 = vz1 + v1;
per_frame_109=q11 = vz1; q12 = v2; q13 = v3;
per_frame_110=//forward comp. of Rotation
per_frame_111= warp = 0.0; zoom = 1; dx = -v2/q16; dy = v3/q16; rot =v1;
per_frame_112=
per_frame_113=
per_frame_114=count = count + (treb > 1.16);
per_frame_115=q31 = count*3.1416/2;
per_frame_116=ds_ = ds_*dec_s + (1-dec_s)*ds;
per_frame_117=q11 = ds_;
per_frame_118=monitor = sqrt(vol_);
warp_1=`float dist, struc, len; float2 uv0, uv1; float3 uv2; float4 box;
warp_2=`static const float3x3 RotMat = float3x3(q20,q21,q22,q23,q24,q25,q26,q27,q28);
warp_3=`
warp_4=`static const float3 CamPos = float3(q4,q5,q6);
warp_5=`static const float  ds = q10, sustain = .96-ds, change = q14;
warp_6=`static const float myzoom = q7, limit = 34, tele=q16;
warp_7=`
warp_8=`float GetDist(float2 uvi) {float2 tmp; tmp = tex2D (sampler_pc_main, uvi).gb; 
warp_9=`  return 1-(tmp.y + 1.0/255*tmp.x);}
warp_10=`
warp_11=`float2 PutDist(float x) {float fg, fb; fg = modf((1-x)*255.0,fb);
warp_12=`  return (float2(fg,fb/255.0));}
warp_13=`
warp_14=`float MinDist (float2 uvi) 
warp_15=`{
warp_16=`   float tmp; float4 nb; float4 nb2; float2 pix;
warp_17=`   pix = texsize.zw*(1.0+length(uvi-0.5)*2);
warp_18=`   tmp = GetDist(uvi);
warp_19=`   nb.x = GetDist(uvi+pix*float2(-1,-1));  
warp_20=`   nb.y = GetDist(uvi+pix*float2(1,-1));
warp_21=`   nb.z = GetDist(uvi+pix*float2(1,1));   
warp_22=`   nb.w = GetDist(uvi+pix*float2(-1,1));
warp_23=`   nb2.x = GetDist(uvi+pix*float2(0,-1));  
warp_24=`   nb2.y = GetDist(uvi+pix*float2(1,0));
warp_25=`   nb2.z = GetDist(uvi+pix*float2(0,1));   
warp_26=`   nb2.w = GetDist(uvi+pix*float2(-1,0));
warp_27=`   //Eo.S. more efficient usage of min to get min value of all 8 GetDist() calls, removes 11ALU
warp_28=`   nb = min( nb, nb2 );
warp_29=`   nb.xy = min( nb.xy, nb.zw );
warp_30=`   tmp = min( nb.x, nb.y );
warp_31=`   return tmp;
warp_32=`}
warp_33=`
warp_34=`float3 Get1 (float2 uvi) {float3 tmp; float2 pix;
warp_35=`   return GetPixel(uvi);} //#
warp_36=`
warp_37=`float4 mbox (float3 uvi) {float3 zz, zz0; float tmp, li;
warp_38=`  zz = uvi; zz0 = zz+q8; li=0;
warp_39=`  for (int n = 0; n <= 7; n++) {
warp_40=`    zz = 2.0*clamp(zz,-1,1)-zz;  tmp = dot(zz,zz);
warp_41=`    zz *= clamp(max(.25/tmp, .25), 0.0, 1.0)*4;
warp_42=`    zz = 2.8*zz + zz0;}
warp_43=`  return float4(zz,li);}
warp_44=`
warp_45=`shader_body {
warp_46=`uv1 = (uv-.5)*aspect.xy*tele;
warp_47=`uv = (uv-.5)*(1-ds/(GetDist(uv))) + .5;
warp_48=`
warp_49=`float3 noise = frac(8*tex2D (sampler_noise_lq,uv+rand_frame.yz)); 
warp_50=`
warp_51=`dist = noise.r;
warp_52=`   if (noise.g > .2) 
warp_53=`   {
warp_54=`       float3 noiseBiased = noise - float3( 0.5, 0.5, 0.5 );
warp_55=`//Eo.S. combine the subtraction on noise to a single float3 to ensure compiler does the subtraction in a single ALU
warp_56=`       dist = MinDist( uv) +  .01 * (noiseBiased.x) * abs(noiseBiased.y);
warp_57=`   }
warp_58=`dist = min(dist,GetDist(uv))- ds*1;
warp_59=`
warp_60=`uv2 = mul(float3(uv1*dist,dist-.0)/myzoom,RotMat)+CamPos;
warp_61=`uv2 = (frac(uv2/8.0+.5)-.5)*8.0;
warp_62=`box = mbox (uv2);
warp_63=`len = (length(box.xyz))*2;
warp_64=`struc = length(box.xy)/limit*2;
warp_65=`
warp_66=`if ((dist <= GetDist(uv)) && (len < limit) && (dist > 0.04/(.0+rad))){
warp_67=` ret.r = (1-sustain)*struc+sustain*(Get1(uv).r); ret.gb=  PutDist(dist); } 
warp_68=` else {ret = Get1(uv)*sustain -.002;} 
warp_69=`
warp_70=`}
comp_1=`float arg;
comp_2=`float2 uv1, uv2, uv3, uv4;
comp_3=`float3 ret1, neu, blur, sun;
comp_4=`
comp_5=`shader_body
comp_6=`{
comp_7=`float ang2, c, s;
comp_8=`uv -= .5;
comp_9=`uv *= aspect.xy;    
comp_10=`
comp_11=`
comp_12=`uv2 = float2(1/rad+time/2, ang*2/3.14);
comp_13=`float z = abs(.5/uv.y);
comp_14=`uv2 = float2(z*uv.x, z+time/2);
comp_15=`float2 noise = (tex2D (sampler_noise_hq,uv2)-.5)/z*2;
comp_16=`//uv += rad*rad * noise*.02;
comp_17=`
comp_18=`float dist = 1;
comp_19=`float bdist = 1;
comp_20=`float inten = 1;
comp_21=`ret1 = 0;
comp_22=`int anz = 1; 
comp_23=`float n = 1;
comp_24=`while (n <= anz) {
comp_25=`    ang2 = n/anz*3.14+q9;
comp_26=`    c = cos(ang2);
comp_27=`    s = sin(ang2);
comp_28=`    uv2.x =  uv.x*c - uv.y*s;
comp_29=`    uv2.y =  uv.x*s + uv.y*c;
comp_30=`    uv2 *= aspect.yx;
comp_31=`    uv3 = frac(1*uv2*dist + .5 );;
comp_32=`
comp_33=`    uv3=abs(frac(uv3+.5)-.5) +rad*rad * noise*.02*bass_att;;
comp_34=`    bdist = (1-GetBlur2(uv3).b);
comp_35=`    uv4 = mul(uv3,float2x2(cos(q31),sin(q31), -sin(q31), cos(q31))),
comp_36=`    sun = .04/length(sin(uv4.x*bass_att+1.5+bdist+ noise*.04*bass_att))*bdist;      
comp_37=`    arg = bdist + q6;
comp_38=`    neu =  lerp(GetPixel (uv3).r,GetBlur1(uv3).r,saturate(q11*8)*1.1) ;
comp_39=`    neu = max(neu,sun)*(bdist+.2)*(2+sin(float3(arg*2, arg*3,5*arg)));
comp_40=`//    neu = lerp(neu,sun/q11,saturate(q11*18))*(bdist+.2)*(2+sin(float3(arg*2, arg*3,5*arg)));
comp_41=`    ret1 = max(ret1*1,neu) ;
comp_42=`n++;
comp_43=`}
comp_44=`//ret = 1-exp(-ret1/2/(bass*.1+1*rad)+.1);
comp_45=`ret = 1-exp(-ret1/(.2/bass+rad)/bass*.5+.1);
comp_46=`//ret = GetPixel(uv+.5).r;
comp_47=`//ret = sun;
comp_48=`}

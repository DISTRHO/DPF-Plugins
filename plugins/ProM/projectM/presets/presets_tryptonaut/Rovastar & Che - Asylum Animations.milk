[preset00]
fRating=3.500000
fGammaAdj=2.000000
fDecay=1.000000
fVideoEchoZoom=1.000000
fVideoEchoAlpha=0.000000
nVideoEchoOrientation=1
nWaveMode=2
bAdditiveWaves=0
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=1
bMaximizeWaveColor=1
bTexWrap=1
bDarkenCenter=1
bRedBlueStereo=0
bBrighten=0
bDarken=0
bSolarize=0
bInvert=0
fWaveAlpha=1.000000
fWaveScale=0.500000
fWaveSmoothing=0.000000
fWaveParam=0.000000
fModWaveAlphaStart=1.500000
fModWaveAlphaEnd=1.000000
fWarpAnimSpeed=1.000000
fWarpScale=1.000000
fZoomExponent=1.000000
fShader=0.000000
zoom=1.000000
rot=0.000000
cx=0.500000
cy=0.500000
dx=0.000000
dy=0.000000
warp=0.000000
sx=1.000000
sy=1.000000
wave_r=0.230000
wave_g=0.200000
wave_b=0.200000
wave_x=0.500000
wave_y=0.500000
ob_size=0.005000
ob_r=0.000000
ob_g=0.000000
ob_b=0.000000
ob_a=0.400000
ib_size=0.000000
ib_r=0.000000
ib_g=0.000000
ib_b=0.300000
ib_a=0.000000
nMotionVectorsX=0.000000
nMotionVectorsY=0.000000
mv_dx=0.000000
mv_dy=0.330000
mv_l=5.000000
mv_r=1.000000
mv_g=0.300000
mv_b=0.100000
mv_a=1.000000
per_frame_1=wave_r = wave_r + 0.350*( 0.60*sin(0.825*time) + 0.40*sin(0.915*time) );
per_frame_2=wave_g = wave_g + 0.350*( 0.60*sin(0.900*time) + 0.40*sin(1.025*time) );
per_frame_3=wave_b = wave_b + 0.350*( 0.60*sin(0.810*time) + 0.40*sin(0.950*time) );
per_frame_4=wave_x = 0.5-cos(time+dx_residual)/3.5;
per_frame_5=wave_y = 0.5-cos(time+dy_residual)/2.5;
per_frame_6=cx = cx + 0.225*( 0.60*sin(0.350*time) + 0.40*sin(0.350*time) );
per_frame_7=cy = cy + 0.225*( 0.60*sin(0.350*time) + 0.40*sin(0.350*time) );
per_frame_8=dx = 0.005 + 0.002*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );
per_frame_9=dy = 0.005 + 0.002*( 0.60*sin(0.234*time) + 0.40*sin(0.277*time) );
per_frame_10=dx_residual=max(bass, bass_att)-1;
per_frame_11=dy_residual=min(bass, bass_att)-1;
per_frame_12=dx = if(above(bass_att+bass,2.8),6*dx,dx);
per_frame_13=// timed sidon sensor
per_frame_14=// le = signal level; desired average value = 2
per_frame_15=le=1.4*bass_att+.1*bass+.5*treb;
per_frame_16=pulse=above(le,th);
per_frame_17=// pulsefreq = running average of interval between last 5 pulses
per_frame_18=pulsefreq=if(equal(pulsefreq,0),2,
per_frame_19=if(pulse,.8*pulsefreq+.2*(time-lastpulse),pulsefreq));
per_frame_20=lastpulse=if(pulse,time,lastpulse);
per_frame_21=// bt = relative time; 0 = prev beat; 1 = expected beat
per_frame_22=bt=(time-lastbeat)/(.5*beatfreq+.5*pulsefreq);
per_frame_23=// hccp = handcicap for th driven by bt
per_frame_24=hccp=(.03/(bt+.2))+.5*if(band(above(bt,.8),below(bt,1.2)),
per_frame_25=(pow(sin((bt-1)*7.854),4)-1),0);
per_frame_26=beat=band(above(le,th+hccp),btblock);
per_frame_27=btblock=1-above(le,th+hccp);
per_frame_28=lastbeat=if(beat,time,lastbeat);
per_frame_29=beatfreq=if(equal(beatfreq,0),2,
per_frame_30=if(beat,.8*beatfreq+.2*(time-lastbeat),beatfreq));
per_frame_31=// th = threshold
per_frame_32=th=if(above(le,th),le+114/(le+10)-7.407,
per_frame_33=th+th*.07/(th-12)+below(th,2.7)*.1*(2.7-th));
per_frame_34=th=if(above(th,6),6,th);
per_frame_35=q3=30/fps;
per_frame_36=ccl=ccl+beat;
per_frame_37=minorccl=minorccl+.01*le;
per_frame_38=q4=beat;
per_frame_39=wave_r=.5+.15*sin(12*ccl)+.35*sin(3.62*minorccl);
per_frame_40=wave_g=.5+.15*sin(14*ccl)+.35*sin(7.38*minorccl);
per_frame_41=wave_b=.5+.15*sin(16*ccl)+.35*sin(5.21*minorccl);
per_frame_42=q1=.5+.25*sin(17*ccl+minorccl);
per_frame_43=cx=if(beat,.5+.5*sin(38*ccl),q1);
per_frame_44=q2=.5+.25*sin(17*ccl+minorccl);
per_frame_45=cy=if(beat,.5+.5*sin(46*ccl),q2);
per_frame_46=mv_x = 1.25;
per_frame_47=mv_y = 1.25;
per_frame_48=mv_dx =q1-0.5;
per_frame_49=mv_dy = -1*(q2-0.5);
per_pixel_1=myrot = 0.03*sin(0.84*time)-0.013*cos(0.784*time)+0.02*sin(1-rad);
per_pixel_2=rot = myrot;
per_pixel_3=// coordinates transfomation
per_pixel_4=// q1,q2 = position; q3 = 1/zoom; q4 = rotation
per_pixel_5=aang=atan2(y-q2,x-q1)-1.57;
per_pixel_6=arad=sqrt(sqr(y-q2)+sqr(x-q1));
per_pixel_7=atx=cos(aang)*arad;
per_pixel_8=aty=sin(aang)*arad;
per_pixel_9=
per_pixel_10=sound=if(below(x,.5),2*x*mid+(1-(2*x))*bass,
per_pixel_11=(x-.5)*2*treb+(1-(x-.5)*2)*mid);
per_pixel_12=sound=sound*q3;
per_pixel_13=zone=below(abs(x-q1),.15)*below(abs(y-q2),.15);
per_pixel_14=rot=if(zone,bass*bass_att*0.2*pow(arad,arad),myrot);
per_pixel_15=dx = if(zone,0,dx+0.01*rad*sound);

[preset00]
fRating=3.000000
fGammaAdj=1.000000
fDecay=0.996000
fVideoEchoZoom=1.000000
fVideoEchoAlpha=0.500000
nVideoEchoOrientation=3
nWaveMode=1
bAdditiveWaves=1
bWaveDots=0
bWaveThick=1
bModWaveAlphaByVolume=0
bMaximizeWaveColor=0
bTexWrap=0
bDarkenCenter=0
bRedBlueStereo=0
bBrighten=0
bDarken=1
bSolarize=0
bInvert=0
fWaveAlpha=0.818000
fWaveScale=0.374038
fWaveSmoothing=0.810000
fWaveParam=0.000000
fModWaveAlphaStart=0.750000
fModWaveAlphaEnd=0.950000
fWarpAnimSpeed=5.995700
fWarpScale=1.331000
fZoomExponent=1.000000
fShader=0.000000
zoom=0.968827
rot=0.000000
cx=0.500000
cy=0.500000
dx=0.000000
dy=0.000000
warp=0.424100
sx=1.000000
sy=1.000000
wave_r=0.500000
wave_g=0.500000
wave_b=0.500000
wave_x=0.500000
wave_y=0.500000
ob_size=0.000000
ob_r=0.500000
ob_g=0.500000
ob_b=0.500000
ob_a=1.000000
ib_size=0.000000
ib_r=0.500000
ib_g=0.500000
ib_b=0.500000
ib_a=0.000000
nMotionVectorsX=0.000000
nMotionVectorsY=0.000000
mv_dx=0.000000
mv_dy=0.000000
mv_l=0.850000
mv_r=0.499900
mv_g=0.499900
mv_b=0.499900
mv_a=1.000000
per_frame_1=old_bass_flop=bass_flop;
per_frame_2=old_treb_flop=treb_flop;
per_frame_3=old_mid_flop=mid_flop;
per_frame_4=chaos=.5+.5*sin(pulse);
per_frame_5=bass_thresh = above(bass_att,bass_thresh)*2 + (1-above(bass_att,bass_thresh))*((bass_thresh-1.6)*chaos+1.6);
per_frame_6=bass_flop=abs(bass_flop-equal(bass_thresh,2));
per_frame_7=treb_thresh=above(treb_att,treb_thresh)*2 + (1-above(treb_att,treb_thresh))*((treb_thresh-1.6)*chaos+1.6);
per_frame_8=treb_flop=abs(treb_flop-equal(treb_thresh,2));
per_frame_9=mid_thresh=above(mid_att,mid_thresh)*2 + (1-above(mid_att,mid_thresh))*((mid_thresh-1.6)*chaos+1.6);
per_frame_10=mid_flop=abs(mid_flop-equal(mid_thresh,2));
per_frame_11=bass_changed=bnot(equal(old_bass_flop,bass_flop));
per_frame_12=mid_changed=bnot(equal(old_mid_flop,mid_flop));
per_frame_13=treb_changed=bnot(equal(old_treb_flop,treb_flop));
per_frame_14=bass_residual = bass_changed*sin(pulse*3) + bnot(bass_changed)*bass_residual;
per_frame_15=treb_residual = treb_changed*sin(pulse*3) + bnot(treb_changed)*treb_residual;
per_frame_16=mid_residual = mid_changed*sin(pulse*3) + bnot(mid_changed)*mid_residual;
per_frame_17=pulse=if(above(abs(pulse),3.14),-3.14,pulse+(bass_thresh+mid_thresh+treb_thresh)*.005);
per_frame_18=entropy=if(bass_changed*mid_changed*treb_changed,(1+bass_flop+treb_flop+mid_flop)*(1+rand(3)),entropy);
per_frame_19=q1=mid_residual;
per_frame_20=q2=bass_residual;
per_frame_21=q3=treb_residual;
per_frame_22=q4=sin(pulse);
per_frame_23=q5=cos(pulse*(.5+.1*entropy));
per_frame_24=q6=sin(pulse*(.5+pow(.25,entropy)));
per_frame_25=q7=above(q1,0)+above(q2,0)+above(q3,0)+above(q3,0)*treb_flop+above(q2,0)*bass_flop+above(q1,0)*mid_flop;
per_frame_26=q8=entropy;
per_frame_27=wave_r=.5+.5*q1;
per_frame_28=wave_b=.5+.5*q2;
per_frame_29=wave_g=.5+.5*q3;
per_frame_30=ob_r=ob_r+ob_r*sin(q1+time*2.18);
per_frame_31=ob_bob_b+ob_b*sin(q2+time*1.73);
per_frame_32=ob_g=ob_g+ob_g*sin(q3+time*2.09);
per_frame_33=ib_r=ib_r+ib_r*cos(q4+q1*2.14);
per_frame_34=ib_b=ib_b+ib_*cos(q4+q2*2.14);
per_frame_35=ib_g=ib_g+ib_g*cos(q4+q3*2.14);
per_frame_36=ob_a=.25+.25*sin(q2+q3*2.14);
per_frame_37=ib_a=.5+.5*sin(q2*2.14+q3);
per_frame_38=ob_size=.025+.025*sin(q3*3+q1);
per_frame_39=ib_size=.025+.025*sin(q1*3+q3);
per_frame_40=warp=0;
per_frame_41=wave_mystery=wave_mystery+.1*sin(time*2.18+q6);
per_frame_42=wave_x=wave_x+.2*sin(time*.811+q1)+.01*(frame%5)*sign(q3);
per_frame_43=wave_y=wave_y+.2*sin(time*2.3+q2)+.01*q7;
per_frame_44=decay=.996+.004*q3;
per_pixel_1=snee=bnot(above(sin(ang)-x,.5)*above(q2,0)+above(y-cos(ang),.5)*above(q1,0));
per_pixel_2=snur=bnot(below(x,.5)*above(q3,0)+below(y,.5)*below(q7,4));
per_pixel_3=grid=sin(sigmoid(sin(y*6.28*q2),sin(x*6.28*q1))*(10+q7));
per_pixel_4=rot=snee*if(above(grid,0),snur,bnot(snur));
per_pixel_5=zoom=zoom+.05*sin(rad*(q7*2+q5)+q1)*bnot(snee)*if(snur,-1,q3);
per_pixel_6=sx=sx+.1*bor(bnot(snee),bnot(snur))*cos(y*3.14*q4);
per_pixel_7=sy=sy+.1*bor(bnot(snee),snur)*cos(x*3.14*q6);
